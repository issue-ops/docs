name: Issue Opened/Edited/Reopened

# At minimum, the issue body should be parsed any time an issue is opened,
# edited, or reopened. This ensures that the most up to date information is
# validated.
on:
  issues:
    types:
      - opened
      - edited

jobs:
  # Different request types may have different inputs. For example, a new
  # repository request may have different inputs than a repository transfer
  # request. You can create multiple jobs to parse different types of requests
  # in the same workflow. Labels can be used to control which jobs run for
  # which types of requests.
  new-repository-request:
    name: New Repository Request
    runs-on: ubuntu-latest

    # Assign labels for different types of requests, and use those labels to
    # trigger different workflows, jobs, and steps.
    if: contains(github.event.issue.labels.*.name, 'issueops:new-repository')

    # Grant GITHUB_TOKEN permission to:
    #   - Read repository contents.
    #   - Create GitHub App installation access tokens.
    #   - Update and comment on issues.
    permissions:
      contents: read
      id-token: write
      issues: write

    steps:
      # Always remove the validated/submitted labels first! This ensures that
      # the validation logic runs any time the issue body is edited. It also
      # ensures the issue must be re-submitted after editing.
      - name: Remove Labels
        id: remove-label
        uses: issue-ops/labeler@vX.X.X
        with:
          action: remove
          issue_number: ${{ github.event.issue.number }}
          labels: |
            issueops:validated
            issueops:submitted

      # If your validation script checks things beyond the scope of the
      # repository it is running in, you will need to create a GitHub App and
      # generate an installation access token in your workflow.
      - name: Get App Token
        id: token
        uses: actions/create-github-app-token@vX.X.X
        with:
          app_id: ${{ secrets.MY_GITHUB_APP_ID }}
          private_key: ${{ secrets.MY_GITHUB_APP_PEM }}
          owner: ${{ github.repository_owner }}

      # Get the repository contents. This lets the workflow reference files in
      # the repository such as issue form templates and validator scripts.
      - name: Checkout
        id: checkout
        uses: actions/checkout@vX.X.X

      # Install Node.js so the workflow can add npm packages that are used by
      # the custom validator scripts (e.g. '@octokit/rest').
      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@vX.X.X
        with:
          node-version: 20
          cache: npm

      # Install NPM packages needed by the validator scripts.
      - name: Install Packages
        id: npm
        run: npm ci

      # Parse the issue body.
      - name: Parse Issue
        id: parse
        uses: issue-ops/parser@vX.X.X
        with:
          body: ${{ github.event.issue.body }}
          issue-form-template: new-repository-request.yml

      # Validate the issue body.
      - name: Validate Issue
        id: validate
        uses: issue-ops/validator@vX.X.X
        with:
          issue-form-template: new-repository-request.yml
          github-token: ${{ steps.token.outputs.token }}
          parsed-issue-body: ${{ steps.parse.outputs.json }}

      # Add a label to mark the request as validated.
      - if: ${{ steps.validate.outputs.result == 'success' }}
        name: Add Validated Label
        id: add-label
        uses: issue-ops/labeler@vX.X.X
        with:
          action: add
          issue_number: ${{ github.event.issue.number }}
          labels: |
            issueops:validated
